2.0 多api控制

3.0 增加 API 切换显示按钮
可以在 Translator 类的 create_widgets 方法中添加一个按钮，点击后可以切换当前使用的 API。
4.0如果输入框没有文本，则不进行翻译。在翻译完成后，可以添加一行代码来清空输入框中的文本
4.1优化api显示
5.0多线程
6.0api切换
7.0 在GUI界面中添加一个状态栏，用于显示当前翻译使用的API和翻译结果的状态（成功/失败）
8.0添加一个历史记录功能，记录用户翻译的文本和结果，方便用户查找和复用。
8.1修复打开多个窗口的bug
8.2添加一个菜单栏，用于设置API优先级、切换翻译语言等操作。
9.0优化界面布局
10.0将翻译结果的插入操作放入主线程中执行，避免在子线程中直接操作GUI界面。
将翻译操作放入一个新线程中执行，避免阻塞主线程。
11.0修复不清空内容的bug
13.0增加关于界面
v1.0当API连接失败时，建议使用logging模块记录错误信息，以便更好地排查问题。


在 __init__ 函数中添加 self.api_index = tk.IntVar(value=0)，用于记录当前使用的 API。

在 check_apis 函数中，当所有的 API 都无法连接时，应该抛出异常，而不是返回 None。
在 create_menu 函数中，应该将 API 切换和翻译语言的菜单放在同一个菜单中，而不是分开。
在 Translator 类中，应该将 self.api_index 传递给 create_menu 函数。
在 translate 函数中，应该将 target_lang 转换为大写字母，而不是缩写。




